# ============================================================================
# GIM_AI - PRODUCTION ENVIRONMENT VARIABLES
# ============================================================================
# Este archivo contiene TODAS las variables de entorno necesarias para
# deployment en producción. Copia este archivo a .env.production y 
# completa con tus valores reales.
#
# ⚠️  NUNCA commitear .env.production con valores reales
# ============================================================================

# ============================================================================
# CORE APPLICATION
# ============================================================================

# Entorno de ejecución
NODE_ENV=production

# Puerto del servidor (Railway usa PORT automático, pero puedes especificar)
PORT=3000

# Nivel de logs (error, warn, info, debug)
LOG_LEVEL=info

# URL base de la aplicación (tu dominio en Railway)
# Ejemplo: https://gim-ai-production.up.railway.app
BASE_URL=https://your-app.up.railway.app

# ============================================================================
# SUPABASE (Database)
# ============================================================================

# URL del proyecto Supabase
# Obtener en: Supabase Dashboard > Settings > API > Project URL
# Ejemplo: https://abcdefghijklmnop.supabase.co
SUPABASE_URL=https://your-project.supabase.co

# Anon/Public Key (para acceso frontend - si lo necesitas)
# Obtener en: Supabase Dashboard > Settings > API > Project API keys > anon public
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# Service Role Key (para backend - ⚠️ MUY SECRETO)
# Obtener en: Supabase Dashboard > Settings > API > Project API keys > service_role
# Este key bypasea Row Level Security (RLS)
SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# Connection String (opcional - para conexiones directas)
# Obtener en: Supabase Dashboard > Settings > Database > Connection string > URI
DATABASE_URL=postgresql://postgres:[PASSWORD]@db.your-project.supabase.co:5432/postgres

# ============================================================================
# REDIS (Queue & Cache)
# ============================================================================

# Railway provee Redis automáticamente cuando lo agregas
# La variable REDIS_URL se inyecta automáticamente
# Formato: redis://default:[PASSWORD]@[HOST]:[PORT]
REDIS_URL=redis://default:password@host:6379

# Configuración de cache (opcional)
REDIS_CACHE_TTL=300
REDIS_CACHE_PREFIX=gim_ai:

# ============================================================================
# WHATSAPP BUSINESS API (Meta)
# ============================================================================

# Phone Number ID
# Obtener en: Meta Developers > WhatsApp > API Setup > Phone number ID
# Ejemplo: 123456789012345
WHATSAPP_PHONE_NUMBER_ID=123456789012345

# WhatsApp Business Account ID
# Obtener en: Meta Developers > WhatsApp > API Setup > WhatsApp Business Account ID
WHATSAPP_BUSINESS_ACCOUNT_ID=123456789012345

# Access Token (permanente)
# Obtener en: Meta Developers > WhatsApp > API Setup > Temporary access token
# Después: Configurar System User para token permanente
WHATSAPP_ACCESS_TOKEN=EAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Webhook Verify Token (crea uno random seguro)
# Este lo defines tú y lo usas al configurar webhook en Meta
WHATSAPP_WEBHOOK_VERIFY_TOKEN=tu_token_secreto_random_12345

# URL del webhook (tu Railway URL + /api/webhook/whatsapp)
WHATSAPP_WEBHOOK_URL=https://your-app.up.railway.app/api/webhook/whatsapp

# Configuración de rate limiting
WHATSAPP_MAX_MESSAGES_PER_DAY=2
WHATSAPP_BUSINESS_HOURS_START=9
WHATSAPP_BUSINESS_HOURS_END=21

# ============================================================================
# GOOGLE GEMINI AI
# ============================================================================

# API Key de Google AI Studio
# Obtener en: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=AIzaSyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Modelo a usar (recomendado: gemini-1.5-flash por costo/performance)
GEMINI_MODEL=gemini-1.5-flash

# Modelo alternativo (fallback)
GEMINI_MODEL_FALLBACK=gemini-1.0-pro

# Rate limiting
GEMINI_MAX_REQUESTS_PER_MINUTE=60

# ============================================================================
# N8N WORKFLOWS
# ============================================================================

# URL de tu instancia n8n (si usas Railway, será otra app)
# Ejemplo: https://n8n-gim-ai.up.railway.app
N8N_WEBHOOK_URL=https://your-n8n.up.railway.app

# API Key para autenticar requests a n8n
# Generar en: n8n > Settings > API > Create API Key
N8N_API_KEY=n8n_api_xxxxxxxxxxxxxxxxxx

# ============================================================================
# MONITORING & OBSERVABILITY
# ============================================================================

# Sentry (Error Tracking)
# Obtener en: https://sentry.io > Create Project > Get DSN
# Ejemplo: https://xxxxx@oxxxxx.ingest.sentry.io/xxxxx
SENTRY_DSN=https://public@sentry.io/project-id

# Environment tag para Sentry
SENTRY_ENVIRONMENT=production

# Release version
SENTRY_RELEASE=gim-ai@1.0.0

# ============================================================================
# SECURITY
# ============================================================================

# JWT Secret (para autenticación de admin/instructores)
# Generar uno random seguro: openssl rand -base64 32
JWT_SECRET=tu_jwt_secret_super_seguro_aqui_32_chars_min

# JWT Expiration
JWT_EXPIRATION=24h

# CORS Origins (dominios permitidos para acceder al API)
# Separar con comas si son múltiples
CORS_ORIGINS=https://your-app.up.railway.app,https://tu-dominio.com

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# ============================================================================
# DASHBOARD CONFIGURATION
# ============================================================================

# Thresholds para alertas críticas
DASHBOARD_REVENUE_DROP_THRESHOLD=20
DASHBOARD_HIGH_DEBT_THRESHOLD=15
DASHBOARD_LOW_NPS_THRESHOLD=30
DASHBOARD_LOW_OCCUPANCY_THRESHOLD=60

# Refresh interval para vistas materializadas (minutos)
DASHBOARD_VIEW_REFRESH_INTERVAL=5

# ============================================================================
# CONTEXTUAL COLLECTION
# ============================================================================

# Tiempo para enviar cobro después de check-in (minutos)
CONTEXTUAL_COLLECTION_DELAY_MINUTES=90

# Umbral de deuda para activar cobro contextual
CONTEXTUAL_COLLECTION_MIN_DEBT=100

# Días de mora antes de escalación
CONTEXTUAL_COLLECTION_ESCALATION_DAYS=30

# ============================================================================
# REMINDERS & NOTIFICATIONS
# ============================================================================

# Tiempo antes de clase para enviar reminder (horas)
REMINDER_HOURS_BEFORE_CLASS=2

# Máximo de reminders por día por usuario
MAX_REMINDERS_PER_DAY=3

# ============================================================================
# CRON JOBS
# ============================================================================

# Habilitar cron jobs (true en producción)
ENABLE_CRON_JOBS=true

# Timezone para cron jobs
TZ=America/Mexico_City

# ============================================================================
# OPTIONAL: ADDITIONAL SERVICES
# ============================================================================

# Twilio (si usas SMS además de WhatsApp)
# TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxx
# TWILIO_AUTH_TOKEN=your_auth_token
# TWILIO_PHONE_NUMBER=+1234567890

# SendGrid (si usas email)
# SENDGRID_API_KEY=SG.xxxxxxxxxxxxxx
# SENDGRID_FROM_EMAIL=noreply@tugym.com

# Cloudinary (si usas imágenes)
# CLOUDINARY_CLOUD_NAME=your_cloud_name
# CLOUDINARY_API_KEY=123456789012345
# CLOUDINARY_API_SECRET=your_api_secret

# ============================================================================
# VALIDACIÓN
# ============================================================================
# Para validar que todas las variables estén correctas, ejecuta:
# node scripts/deployment/validate-env.js
# ============================================================================
